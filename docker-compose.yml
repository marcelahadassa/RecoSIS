services:
  frontend:
    build: ./frontend
    container_name: frontend-container
    ports:
      - "5173:5173" # Mapeia a porta do Vite para a sua máquina
    volumes:
      # Espelha seu código local para dentro do contêiner para desenvolvimento em tempo real
      - ./frontend:/app
      # Impede que a node_modules local (se existir) sobrescreva a do contêiner
      - /app/node_modules
    environment:
      # Garante que a atualização automática (hot reload) funcione bem no Docker
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - gateway # Garante que o frontend só sobe depois do backend estar pronto

  gateway:
    build: ./gateway-api
    container_name: gateway-api-container
    ports:
      - "3000:3000"
    env_file:
      - ./.env 
    depends_on:
      postgres-db: # MODIFICADO AQUI
        condition: service_healthy
      rabbitmq: # MODIFICADO AQUI
        condition: service_healthy


  postgres-db: # <--- 2 espaços de indentação
    image: postgres:14-alpine
    container_name: postgres-db-container
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"] # <--- 6 espaços
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:  # <--- 2 espaços de indentação
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq-container
    ports:
      - "5673:5672"
      - "15672:15672"
    healthcheck: # <--- 4 espaços de indentação (no mesmo nível de 'image')
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"] # <--- 6 espaços
      interval: 10s
      timeout: 5s
      retries: 5  

  recommendation-service:
    build: ./recommendation-service
    container_name: recommendation-service-container
    depends_on:
      - rabbitmq
      - postgres-db
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - PYTHONUNBUFFERED=1
      - LASTFM_API_KEY=${LASTFM_API_KEY}

volumes:
  postgres_data: